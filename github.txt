看廖雪峰老师git教程所做笔记。
本地操作（所有的版本库只在本地保存）：
	安装git:
		Lunix:
			sudo apt-get install git
		Windows:
			直接官方下载，把git shell当作命令行
		Mac:
			安装Xcode
	将机器上所有仓库与你的github账号绑定：
		$git config --global user.name "Your Name"
		$git config --global user.email "email@example.com"
	创建repo:
		第一步：
			新建空文件夹。
		第二步：
			$git init

	添加新文件,比如readme.txt:
		由于可以在一个暂存区可以缓存，即可多次add文件，然后在commit。所以有两步。
		第一步：
			$git add readme.txt
		第二步：
			$git commit -m "wrote a readme file"  #-m后面是提交的说明，最好是有意义的。

	$git status  掌握当前仓库的情况
	$git diff + 文件名   是本地和暂存区的比较
	$git diff HEAD -- + 文件名 是本地和版本库的比较

	staged 暂存区，也就是有没有被add进入缓存的意思
	untracked 从来没有添加过，即没有进入暂存区。

	$git log  显示从最近到最远的提交日志，同时会显示commit的版本号，也就是commit id。  --pretty=oneline参数可以显示简洁版

	版本退回，也就是读档
		退回上一个版本：git reset --hard HEAD^。在git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上个版本就是HEAD^^.往上100个版本就是HEAD~100。
		git reset --hard +commit id。此时git log已经看不到之前的最新的版本，可以用commit id找回之前的版本。不必输入全id，git找的到即可。
		git reflog 查看之前所有的版本，可以从这里看到所有版本的commit id。

	git checkout -- + 文件名  把在工作区的修改（不小心删除了文件也可以撤销，删除也只是一个修改）全部撤销，如果还没有add，那么撤销回版本库，如果已经add但没有commit，那么撤销回到暂存区的版本
	git reset HEAD + 文件名  把暂存区的修改撤销掉，重新放回工作区。
	git rm 删除文件，记得rm之后再commit
远程仓库：
    本地git仓库和github之间的传输：
	    1.创建SSH KEY：
		    ssh-keygen -t rsa -C "youremail@example.com"。找到用户目录下的.shh文件中的id_rsa（私钥）和id_rsa.pub（公钥），没有的话输入上述命令即可。
		2.登陆GitHub，打开“Account settings”，“SSH Keys”页面
		3.点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
	添加远程库
	    在本地创建了一个本地库之后，可以在github上创建一个git仓库，完成同步。
		git remote add origin git@github.com:michaelliao/learngit.git 修改用户名和仓库名即可将两个仓库关联。
		git push -u origin master 将本地库推送到远程库
		git push origin master  以后再修改了之后同步，这里是同步的主分支。
	从远程库克隆
	    git clone git@github.com:michaelliao/gitskills.git 修改用户名和仓库名即可将
分支管理：
    HEAD表示当前工作区所在分支，master表示主分支
    查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	当合并出现冲突时，即有两个或多个分支修改了同一个文件，会发生冲突，会把详细的冲突情况写在冲突文件中。如果分支被删除，则git log也看不到分支信息。称为Fast forward模式。
但采用类似git merge --no-ff -m "merge with no-ff" dev的命令时，会在合并的同时，提交一个新的commit。	
	删除分支：git branch -d <name>
	bug分支：可以采用git stash将工作状态‘藏起来’，执行命令后，工作区为空。此时新建bug分支，修改完成后再和mster分支合并，即可修复bug。git stash pop可以恢复封印，可恢复工作区，并且master上的bug也修复了。
	         git stash list：查看封印列表。
			 git stash apply：恢复某一个封印
			 git stash drop：删除某一个封印
	Feature分支：开发新功能是最好新建一个feature分支，可以在未合并且以后都不需要这个功能时，git branch -D <feature> 强行删除这个分支
	分支推送：git push <name>，origin master即为主分支，非主分支也可以推送，取决与个人。本地新建的分支如果不推送到远程，对其他人就是不可见的；
	git log --graph --pretty=oneline --abbrev-commit  查看历史分支流程提交信息
	多人协作：
	1.首先，可以试图用git push origin branch-name推送自己的修改；
	2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	3.如果合并有冲突，则解决冲突，并在本地提交；
	4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
	  如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
标签管理：
    标签是有意义的commit id。默认只存在本地。
	git tag <name>  打标签
	git tag 查看所有标签
	git tag <name> <commit id> 默认是为最新的commit打标签，这个是为过去的commit打标签。可用git log查看标签列表
	git tag -a <tagname> -m "blablabla..."  可以指定标签信息
	git tag -s <tagname> -m "blablabla..."  可以用PGP签名标签，私有
	git show <tagname> 可以看到上面的blalalal..
    命令git push origin <tagname>可以推送一个本地标签；
	命令git push origin --tags可以推送全部未推送过的本地标签；
	命令git tag -d <tagname>可以删除一个本地标签；
	命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
自定义git:可以自己配置git的如外观字体之类的。如git config --global color.ui true 可百度更多

	